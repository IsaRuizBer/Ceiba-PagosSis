plugins {
	id 'org.springframework.boot' version '2.3.4.RELEASE'
	//id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
	//id 'jacoco'
	id "org.sonarqube" version "2.7"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

sonarqube {
	properties {
		property "sonar.sourceEncoding", "UTF-8"
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}
test.finalizedBy jacocoTestReport

group = 'com.ceiba'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	runtimeOnly 'mysql:mysql-connector-java'
	compile 'org.mariadb.jdbc:mariadb-java-client'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testCompile "org.mockito:mockito-core:2.+"
	runtime 'com.h2database:h2'

	testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.1')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.1')
	testImplementation "org.mockito:mockito-core:2.+"

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

}

/*
test {
	useJUnitPlatform()
}*/

sonarqube {
	properties {
		//property "sonar.sources", "backend/src/main/java"
		//property "sonar.java.binaries", "backend/build/classes/java/main"
		//property "sonar.tests", "backend/src/test/java"
		//property "sonar.test.binaries", "backend/build/classes/java/test"
		property "sonar.jacoco.reportPaths", "backend/build/reports/jacoco/test/jacocoTestReport.xml"
		//property "sonar.junit.reportPaths", "backend/build/test-results/test"
	}
}





